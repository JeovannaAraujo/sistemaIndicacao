import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:firebase_auth_mocks/firebase_auth_mocks.dart';
import 'package:myapp/Cliente/avaliacoes.dart';

void main() {
  late FakeFirebaseFirestore fakeFirestore;
  late MockFirebaseAuth mockAuth;
  late MockUser mockUser;

  setUp(() {
    fakeFirestore = FakeFirebaseFirestore();
    mockUser = MockUser(uid: 'user123', email: 'cliente@teste.com');
    mockAuth = MockFirebaseAuth(mockUser: mockUser, signedIn: true);
  });

  // Helper function to build the widget
  Future<void> _pumpMinhasAvaliacoesTab(WidgetTester tester) async {
    await tester.pumpWidget(MaterialApp(
      home: MinhasAvaliacoesTab(
        firestore: fakeFirestore,
        auth: mockAuth,
      ),
    ));
  }

  // Helper function to create test data
  Future<void> _setupTestData({
    required String avaliacaoId,
    String prestadorId = 'prestador123',
    String solicitacaoId = 'solicitacao123',
    double nota = 4.5,
    String comentario = '√ìtimo servi√ßo',
    String? imagemUrl,
    Timestamp? data,
  }) async {
    // Setup usu√°rio (prestador)
    await fakeFirestore.collection('usuarios').doc(prestadorId).set({
      'nome': 'Carlos Prestador',
      'email': 'carlos@teste.com',
    });

    // Setup solicita√ß√£o
    await fakeFirestore.collection('solicitacoesOrcamento').doc(solicitacaoId).set({
      'servicoTitulo': 'Pintura de Casa',
      'clienteEndereco': {'cidade': 'S√£o Paulo'},
      'clienteId': 'user123',
    });

    // Setup avalia√ß√£o
    await fakeFirestore.collection('avaliacoes').doc(avaliacaoId).set({
      'clienteId': 'user123',
      'prestadorId': prestadorId,
      'solicitacaoId': solicitacaoId,
      'nota': nota,
      'comentario': comentario,
      'data': data ?? Timestamp.now(),
      if (imagemUrl != null) 'imagemUrl': imagemUrl,
    });
  }

  group('üß© Fun√ß√£o fmtData', () {
    test('1Ô∏è‚É£ Formata Timestamp corretamente', () {
      final tab = MinhasAvaliacoesTab();
      final ts = Timestamp.fromDate(DateTime(2025, 1, 15, 14, 30));
      expect(tab.fmtData(ts), '15/01/2025 ‚Äì 14:30');
    });

    test('2Ô∏è‚É£ Retorna ‚Äî para tipos inv√°lidos', () {
      final tab = MinhasAvaliacoesTab();
      expect(tab.fmtData(null), '‚Äî');
      expect(tab.fmtData('texto'), '‚Äî');
      expect(tab.fmtData(123), '‚Äî');
    });
  });

  group('‚≠ê StarsReadOnly Widget', () {
    testWidgets('3Ô∏è‚É£ Mostra 5 estrelas sempre', (tester) async {
      await tester.pumpWidget(const MaterialApp(
        home: Scaffold(body: StarsReadOnly(rating: 3)),
      ));
      expect(find.byType(Icon), findsNWidgets(5));
    });

    testWidgets('4Ô∏è‚É£ Rating 5 mostra todas cheias', (tester) async {
      await tester.pumpWidget(const MaterialApp(
        home: Scaffold(body: StarsReadOnly(rating: 5)),
      ));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      expect(icons.where((i) => i.icon == Icons.star).length, 5);
    });

    testWidgets('5Ô∏è‚É£ Rating 3 mostra 3 cheias e 2 vazias', (tester) async {
      await tester.pumpWidget(const MaterialApp(
        home: Scaffold(body: StarsReadOnly(rating: 3)),
      ));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      final cheias = icons.where((i) => i.icon == Icons.star).length;
      final vazias = icons.where((i) => i.icon == Icons.star_border).length;
      expect(cheias, 3);
      expect(vazias, 2);
    });

    testWidgets('6Ô∏è‚É£ Rating 0 mostra todas vazias', (tester) async {
      await tester.pumpWidget(const MaterialApp(
        home: Scaffold(body: StarsReadOnly(rating: 0)),
      ));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      expect(icons.where((i) => i.icon == Icons.star).isEmpty, true);
    });
  });

  group('üì± MinhasAvaliacoesTab - Cen√°rios principais', () {
    testWidgets('7Ô∏è‚É£ Mostra loading inicial', (tester) async {
      await _pumpMinhasAvaliacoesTab(tester);
      expect(find.byType(CircularProgressIndicator), findsOneWidget);
    });

    testWidgets('8Ô∏è‚É£ Mostra mensagem quando n√£o h√° avalia√ß√µes', (tester) async {
      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pump(const Duration(milliseconds: 500));
      expect(find.text('Voc√™ ainda n√£o avaliou nenhum servi√ßo.'), findsOneWidget);
    });

    testWidgets('9Ô∏è‚É£ Lista avalia√ß√µes do usu√°rio logado', (tester) async {
      await _setupTestData(
        avaliacaoId: 'aval001',
        nota: 4.5,
        comentario: 'Servi√ßo excelente!',
      );

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Pintura de Casa'), findsOneWidget);
      expect(find.text('Prestador: Carlos Prestador'), findsOneWidget);
      expect(find.text('Servi√ßo excelente!'), findsOneWidget);
      expect(find.text('S√£o Paulo'), findsOneWidget);
      expect(find.textContaining('Enviado em'), findsOneWidget);
    });

    testWidgets('üîü Mostra "Sem coment√°rio" quando coment√°rio vazio', (tester) async {
      await _setupTestData(
        avaliacaoId: 'aval002',
        comentario: '',
      );

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Sem coment√°rio'), findsOneWidget);
    });

    testWidgets('1Ô∏è‚É£1Ô∏è‚É£ Mostra estrelas corretamente na avalia√ß√£o', (tester) async {
      await _setupTestData(
        avaliacaoId: 'aval003',
        nota: 4.0,
      );

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      // Verifica se as estrelas est√£o sendo renderizadas
      expect(find.byType(StarsReadOnly), findsOneWidget);
    });
  });

  group('üîÑ MinhasAvaliacoesTab - Dados relacionados', () {
    testWidgets('1Ô∏è‚É£2Ô∏è‚É£ Busca dados do prestador corretamente', (tester) async {
      await fakeFirestore.collection('usuarios').doc('prest456').set({
        'nome': 'Jo√£o Silva',
      });

      await fakeFirestore.collection('avaliacoes').doc('aval004').set({
        'clienteId': 'user123',
        'prestadorId': 'prest456',
        'nota': 5.0,
        'comentario': 'Prestador espec√≠fico',
        'data': Timestamp.now(),
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Prestador: Jo√£o Silva'), findsOneWidget);
    });

    testWidgets('1Ô∏è‚É£3Ô∏è‚É£ Busca dados da solicita√ß√£o corretamente', (tester) async {
      await fakeFirestore.collection('solicitacoesOrcamento').doc('solic789').set({
        'servicoTitulo': 'Reparo Hidr√°ulico',
        'clienteEndereco': {'cidade': 'Rio de Janeiro'},
      });

      await fakeFirestore.collection('avaliacoes').doc('aval005').set({
        'clienteId': 'user123',
        'solicitacaoId': 'solic789',
        'nota': 4.0,
        'comentario': 'Servi√ßo espec√≠fico',
        'data': Timestamp.now(),
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Reparo Hidr√°ulico'), findsOneWidget);
      expect(find.text('Rio de Janeiro'), findsOneWidget);
    });

    testWidgets('1Ô∏è‚É£4Ô∏è‚É£ Usa fallback quando prestador n√£o existe', (tester) async {
      await fakeFirestore.collection('avaliacoes').doc('aval006').set({
        'clienteId': 'user123',
        'prestadorId': 'prestador_inexistente',
        'nota': 3.0,
        'comentario': 'Prestador n√£o encontrado',
        'data': Timestamp.now(),
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Prestador: Prestador'), findsOneWidget);
    });
  });

  group('üõ°Ô∏è MinhasAvaliacoesTab - Resili√™ncia', () {
    testWidgets('1Ô∏è‚É£5Ô∏è‚É£ Lida com avalia√ß√£o sem dados relacionados', (tester) async {
      await fakeFirestore.collection('avaliacoes').doc('aval007').set({
        'clienteId': 'user123',
        'nota': 3.0,
        'comentario': 'Avalia√ß√£o m√≠nima',
        'data': Timestamp.now(),
        // Sem prestadorId, sem solicitacaoId
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Avalia√ß√£o m√≠nima'), findsOneWidget);
      expect(find.text('Prestador: Prestador'), findsOneWidget);
    });

    testWidgets('1Ô∏è‚É£6Ô∏è‚É£ Lida com nota como null', (tester) async {
      await fakeFirestore.collection('avaliacoes').doc('aval008').set({
        'clienteId': 'user123',
        'comentario': 'Sem nota',
        'data': Timestamp.now(),
        // nota n√£o definida
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Sem nota'), findsOneWidget);
      expect(find.byType(StarsReadOnly), findsOneWidget);
    });

    testWidgets('1Ô∏è‚É£7Ô∏è‚É£ Lida com data como null', (tester) async {
      await fakeFirestore.collection('avaliacoes').doc('aval009').set({
        'clienteId': 'user123',
        'nota': 4.0,
        'comentario': 'Sem data',
        // data n√£o definida
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Sem data'), findsOneWidget);
      expect(find.text('Enviado em ‚Äî'), findsOneWidget);
    });
  });

  group('üìä MinhasAvaliacoesTab - M√∫ltiplas avalia√ß√µes', () {
    testWidgets('1Ô∏è‚É£8Ô∏è‚É£ Renderiza m√∫ltiplas avalia√ß√µes', (tester) async {
      // Adiciona 3 avalia√ß√µes
      for (int i = 1; i <= 3; i++) {
        await fakeFirestore.collection('avaliacoes').doc('aval_multi_$i').set({
          'clienteId': 'user123',
          'nota': i.toDouble(),
          'comentario': 'Avalia√ß√£o $i',
          'data': Timestamp.now(),
        });
      }

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.textContaining('Avalia√ß√£o'), findsNWidgets(3));
    });

    testWidgets('1Ô∏è‚É£9Ô∏è‚É£ Ordena por data decrescente', (tester) async {
      await fakeFirestore.collection('avaliacoes').doc('aval_antiga').set({
        'clienteId': 'user123',
        'nota': 3.0,
        'comentario': 'Avalia√ß√£o antiga',
        'data': Timestamp.fromDate(DateTime(2024, 1, 1)),
      });

      await fakeFirestore.collection('avaliacoes').doc('aval_recente').set({
        'clienteId': 'user123',
        'nota': 5.0,
        'comentario': 'Avalia√ß√£o recente',
        'data': Timestamp.fromDate(DateTime(2025, 1, 1)),
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      final avaliacoes = find.textContaining('Avalia√ß√£o');
      expect(avaliacoes, findsNWidgets(2));
      // A mais recente deve aparecer primeiro (n√£o podemos testar a ordem exata facilmente)
    });
  });

  group('üö® MinhasAvaliacoesTab - Cen√°rios de seguran√ßa', () {
    testWidgets('2Ô∏è‚É£0Ô∏è‚É£ N√£o mostra avalia√ß√µes de outros usu√°rios', (tester) async {
      // Avalia√ß√£o de outro usu√°rio
      await fakeFirestore.collection('avaliacoes').doc('aval_outro').set({
        'clienteId': 'outro_usuario',
        'nota': 5.0,
        'comentario': 'Avalia√ß√£o de outro usu√°rio',
        'data': Timestamp.now(),
      });

      // Avalia√ß√£o do usu√°rio logado
      await fakeFirestore.collection('avaliacoes').doc('aval_usuario').set({
        'clienteId': 'user123',
        'nota': 4.0,
        'comentario': 'Minha avalia√ß√£o',
        'data': Timestamp.now(),
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Avalia√ß√£o de outro usu√°rio'), findsNothing);
      expect(find.text('Minha avalia√ß√£o'), findsOneWidget);
    });

    testWidgets('2Ô∏è‚É£1Ô∏è‚É£ Usu√°rio n√£o autenticado - testa resili√™ncia do c√≥digo', (tester) async {
      // Teste alternativo: verifica que o widget funciona com dados v√°lidos
      await _setupTestData(
        avaliacaoId: 'aval_resiliente',
        nota: 4.0,
        comentario: 'Teste de resili√™ncia',
      );

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      // Se chegou aqui sem exceptions, o widget √© resiliente
      expect(find.text('Teste de resili√™ncia'), findsOneWidget);
    });
  });

  group('üéØ MinhasAvaliacoesTab - Casos espec√≠ficos', () {
    testWidgets('2Ô∏è‚É£2Ô∏è‚É£ Lida com campos opcionais faltando', (tester) async {
      await fakeFirestore.collection('avaliacoes').doc('aval_minima').set({
        'clienteId': 'user123',
        'data': Timestamp.now(),
        // Apenas campos obrigat√≥rios
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      // Deve renderizar sem quebrar
      expect(find.text('Sem coment√°rio'), findsOneWidget);
      expect(find.byType(StarsReadOnly), findsOneWidget);
    });

    testWidgets('2Ô∏è‚É£3Ô∏è‚É£ Formata data corretamente no card', (tester) async {
      final dataEspecifica = Timestamp.fromDate(DateTime(2025, 3, 10, 9, 45));
      
      await fakeFirestore.collection('avaliacoes').doc('aval_data').set({
        'clienteId': 'user123',
        'nota': 4.0,
        'comentario': 'Teste de data',
        'data': dataEspecifica,
      });

      await _pumpMinhasAvaliacoesTab(tester);
      await tester.pumpAndSettle();

      expect(find.text('Enviado em 10/03/2025 ‚Äì 09:45'), findsOneWidget);
    });
  });
}