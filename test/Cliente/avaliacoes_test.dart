import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:myapp/Cliente/avaliacoes.dart'; // ajuste o caminho real

void main() {
  final tab = MinhasAvaliacoesTab();

  group('üß© fmtData()', () {
    test('1Ô∏è‚É£ formata data corretamente', () {
      final ts = Timestamp.fromDate(DateTime(2025, 10, 14));
      expect(tab.fmtData(ts), '14/10/2025');
    });

    test('2Ô∏è‚É£ retorna ‚Äî para null', () {
      expect(tab.fmtData(null), '‚Äî');
    });

    test('3Ô∏è‚É£ retorna ‚Äî para tipos inv√°lidos', () {
      expect(tab.fmtData(123), '‚Äî');
      expect(tab.fmtData('2025-10-14'), '‚Äî');
    });

    test('4Ô∏è‚É£ respeita o formato dd/MM/yyyy', () {
      final ts = Timestamp.fromDate(DateTime(2030, 1, 5));
      expect(tab.fmtData(ts), '05/01/2030');
    });
  });

  group('‚è≥ duracaoFromSolic()', () {
    test('5Ô∏è‚É£ retorna valor + unidade singular', () {
      final s = {'tempoEstimadoValor': 1, 'tempoEstimadoUnidade': 'dia'};
      expect(tab.duracaoFromSolic(s), '1 dia');
    });

    test('6Ô∏è‚É£ retorna valor + unidade plural', () {
      final s = {'tempoEstimadoValor': 3, 'tempoEstimadoUnidade': 'hora'};
      expect(tab.duracaoFromSolic(s), '3 horas');
    });

    test('7Ô∏è‚É£ ignora valores 0 ou negativos', () {
      final s = {'tempoEstimadoValor': 0, 'tempoEstimadoUnidade': 'dia'};
      expect(tab.duracaoFromSolic(s), '‚Äî');
      final s2 = {'tempoEstimadoValor': -2, 'tempoEstimadoUnidade': 'hora'};
      expect(tab.duracaoFromSolic(s2), '‚Äî');
    });

    test('8Ô∏è‚É£ ignora quando unidade est√° vazia', () {
      final s = {'tempoEstimadoValor': 3, 'tempoEstimadoUnidade': ''};
      expect(tab.duracaoFromSolic(s), '‚Äî');
    });

    test('9Ô∏è‚É£ ignora quando valor √© nulo', () {
      final s = {'tempoEstimadoUnidade': 'dias'};
      expect(tab.duracaoFromSolic(s), '‚Äî');
    });

    test('üîü retorna dura√ß√£o baseada em timestamps (3 dias)', () {
      final ini = Timestamp.fromDate(DateTime(2025, 1, 1));
      final fim = Timestamp.fromDate(DateTime(2025, 1, 3));
      final s = {'dataInicioSugerida': ini, 'dataFinalPrevista': fim};
      expect(tab.duracaoFromSolic(s), '3 dias');
    });

    test('11Ô∏è‚É£ diferen√ßa 0 dia ‚Üí 1 dia', () {
      final ini = Timestamp.fromDate(DateTime(2025, 1, 1));
      final fim = Timestamp.fromDate(DateTime(2025, 1, 1));
      final s = {'dataInicioSugerida': ini, 'dataFinalPrevista': fim};
      expect(tab.duracaoFromSolic(s), '1 dia');
    });

    test('12Ô∏è‚É£ diferen√ßa negativa tamb√©m vira positiva', () {
      final ini = Timestamp.fromDate(DateTime(2025, 1, 10));
      final fim = Timestamp.fromDate(DateTime(2025, 1, 5));
      final s = {'dataInicioSugerida': ini, 'dataFinalPrevista': fim};
      expect(tab.duracaoFromSolic(s), '6 dias');
    });

    test('13Ô∏è‚É£ retorna ‚Äî quando mapa √© nulo', () {
      expect(tab.duracaoFromSolic(null), '‚Äî');
    });

    test('14Ô∏è‚É£ retorna ‚Äî quando sem datas', () {
      expect(tab.duracaoFromSolic({}), '‚Äî');
    });

    test('15Ô∏è‚É£ ignora quando campos s√£o inv√°lidos', () {
      final s = {'dataInicioSugerida': 'texto', 'dataFinalPrevista': 123};
      expect(tab.duracaoFromSolic(s), '‚Äî');
    });

    test('16Ô∏è‚É£ formata corretamente quando usa dataFinalizacaoReal', () {
      final ini = Timestamp.fromDate(DateTime(2025, 1, 1));
      final fim = Timestamp.fromDate(DateTime(2025, 1, 2));
      final s = {'dataInicioSugerida': ini, 'dataFinalizacaoReal': fim};
      expect(tab.duracaoFromSolic(s), '2 dias');
    });

    test('17Ô∏è‚É£ arredonda corretamente dura√ß√£o longa', () {
      final ini = Timestamp.fromDate(DateTime(2025, 1, 1));
      final fim = Timestamp.fromDate(DateTime(2025, 1, 31));
      final s = {'dataInicioSugerida': ini, 'dataFinalPrevista': fim};
      expect(tab.duracaoFromSolic(s), '31 dias');
    });
  });

  group('üì¶ marcarAvaliadaSeNecessario()', () {
    late FakeFirebaseFirestore fake;

    setUp(() async {
      fake = FakeFirebaseFirestore();
    });

    test('18Ô∏è‚É£ n√£o faz nada com solicitacaoId vazio', () async {
      await tab.marcarAvaliadaSeNecessario(
        solicitacaoId: '',
        clienteUid: 'cli123',
        nota: 5,
        comentario: '√≥timo',
        firestore: fake,
      );
      expect(true, isTrue);
    });

    test('19Ô∏è‚É£ n√£o altera se documento n√£o existe', () async {
      await tab.marcarAvaliadaSeNecessario(
        solicitacaoId: 'inexistente',
        clienteUid: 'cli123',
        nota: 5,
        comentario: 'bom',
        firestore: fake,
      );
      final snap = await fake.collection('solicitacoesOrcamento').get();
      expect(snap.docs, isEmpty);
    });

    test('20Ô∏è‚É£ atualiza status se for finalizada', () async {
      final doc = await fake.collection('solicitacoesOrcamento').add({
        'status': 'finalizada',
      });
      await tab.marcarAvaliadaSeNecessario(
        solicitacaoId: doc.id,
        clienteUid: 'cli123',
        nota: 4.5,
        comentario: 'show',
        firestore: fake,
      );
      final updated = await fake.collection('solicitacoesOrcamento').doc(doc.id).get();
      expect(updated['status'], 'avaliada');
    });

    test('21Ô∏è‚É£ cria hist√≥rico dentro da subcole√ß√£o', () async {
      final doc = await fake.collection('solicitacoesOrcamento').add({
        'status': 'finalizada',
      });
      await tab.marcarAvaliadaSeNecessario(
        solicitacaoId: doc.id,
        clienteUid: 'cliXYZ',
        nota: 4,
        comentario: 'bom servi√ßo',
        firestore: fake,
      );
      final historico = await fake
          .collection('solicitacoesOrcamento')
          .doc(doc.id)
          .collection('historico')
          .get();
      expect(historico.docs.length, 1);
      expect(historico.docs.first['tipo'], 'avaliada_cliente');
    });

    test('22Ô∏è‚É£ ignora se status n√£o √© finalizada', () async {
      final doc = await fake.collection('solicitacoesOrcamento').add({
        'status': 'andamento',
      });
      await tab.marcarAvaliadaSeNecessario(
        solicitacaoId: doc.id,
        clienteUid: 'cli123',
        nota: 3,
        comentario: 'meh',
        firestore: fake,
      );
      final snap = await fake.collection('solicitacoesOrcamento').doc(doc.id).get();
      expect(snap['status'], 'andamento');
    });

    test('23Ô∏è‚É£ adiciona campos corretos no hist√≥rico', () async {
      final doc = await fake.collection('solicitacoesOrcamento').add({'status': 'finalizada'});
      await tab.marcarAvaliadaSeNecessario(
        solicitacaoId: doc.id,
        clienteUid: 'u123',
        nota: 5,
        comentario: 'perfeito',
        firestore: fake,
      );
      final hist = await fake
          .collection('solicitacoesOrcamento')
          .doc(doc.id)
          .collection('historico')
          .get();
      final data = hist.docs.first.data();
      expect(data['porUid'], 'u123');
      expect(data['porRole'], 'Cliente');
      expect(data['mensagem'], contains('avaliou'));
    });
  });

  group('‚≠ê StarsReadOnly', () {
    testWidgets('24Ô∏è‚É£ mostra 5 √≠cones sempre', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: 3)));
      expect(find.byType(Icon), findsNWidgets(5));
    });

    testWidgets('25Ô∏è‚É£ rating 0 mostra todas vazias', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: 0)));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      expect(icons.where((i) => i.icon == Icons.star_border).length, 5);
    });

    testWidgets('26Ô∏è‚É£ rating 5 mostra todas cheias', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: 5)));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      expect(icons.where((i) => i.icon == Icons.star).length, 5);
    });

    testWidgets('27Ô∏è‚É£ rating 3 mostra 3 cheias e 2 vazias', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: 3)));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      final full = icons.where((i) => i.icon == Icons.star).length;
      final empty = icons.where((i) => i.icon == Icons.star_border).length;
      expect(full, 3);
      expect(empty, 2);
    });

    testWidgets('28Ô∏è‚É£ rating fracionado 2.5 arredonda corretamente', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: 2.5)));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      final full = icons.where((i) => i.icon == Icons.star).length;
      expect(full, 2);
    });

    testWidgets('29Ô∏è‚É£ rating negativo trata como 0', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: -3)));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      expect(icons.where((i) => i.icon == Icons.star).isEmpty, true);
    });

    testWidgets('30Ô∏è‚É£ rating >5 mant√©m m√°ximo 5 cheias', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: 10)));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      expect(icons.where((i) => i.icon == Icons.star).length, 5);
    });

    testWidgets('31Ô∏è‚É£ widget renderiza sem erros com rating nulo', (tester) async {
      await tester.pumpWidget(MaterialApp(home: StarsReadOnly(rating: 0)));
      expect(find.byType(StarsReadOnly), findsOneWidget);
    });

    testWidgets('32Ô∏è‚É£ possui cor amarela padr√£o', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: 4)));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      expect(icons.first.color, const Color(0xFFFFC107));
    });

    testWidgets('33Ô∏è‚É£ tamanho dos √≠cones √© 18', (tester) async {
      await tester.pumpWidget(const MaterialApp(home: StarsReadOnly(rating: 4)));
      final icons = tester.widgetList<Icon>(find.byType(Icon)).toList();
      expect(icons.first.size, 18);
    });
  });
}
