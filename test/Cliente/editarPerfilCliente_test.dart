import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_core_platform_interface/firebase_core_platform_interface.dart';
import 'package:myapp/Cliente/editarPerfilCliente.dart';

/// üîß Mock do Firebase atualizado para SDK 3.5+
/// (sem @override em m√©todos que n√£o existem mais)
class _FakeFirebase extends FirebasePlatform {
  // üîπ Este m√©todo simula a cria√ß√£o de um app, mas n√£o usa @override,
  // pois o m√©todo original foi removido da interface.
  FirebaseAppPlatform createFirebaseApp({
    required String name,
    required FirebaseOptions options,
  }) {
    return _FakeFirebaseApp(name, options);
  }

  @override
  FirebaseAppPlatform app([String? name]) {
    return _FakeFirebaseApp(
      name ?? 'fake',
      const FirebaseOptions(
        apiKey: 'fake',
        appId: 'fake',
        messagingSenderId: 'fake',
        projectId: 'fake',
      ),
    );
  }

  @override
  List<FirebaseAppPlatform> get apps => [
        _FakeFirebaseApp(
          'fake',
          const FirebaseOptions(
            apiKey: 'fake',
            appId: 'fake',
            messagingSenderId: 'fake',
            projectId: 'fake',
          ),
        ),
      ];

  @override
  Future<FirebaseAppPlatform> initializeApp({
    String? name,
    FirebaseOptions? options,
  }) async {
    return _FakeFirebaseApp(
      name ?? 'fake',
      options ??
          const FirebaseOptions(
            apiKey: 'fake',
            appId: 'fake',
            messagingSenderId: 'fake',
            projectId: 'fake',
          ),
    );
  }
}

/// üîπ Mock de um app Firebase
class _FakeFirebaseApp extends FirebaseAppPlatform {
  _FakeFirebaseApp(String name, FirebaseOptions options) : super(name, options);
}

/// üîπ Inicializa√ß√£o fake segura
Future<void> setupFirebaseMocks() async {
  TestWidgetsFlutterBinding.ensureInitialized();
  FirebasePlatform.instance = _FakeFirebase();
  await Firebase.initializeApp(
    name: 'fake',
    options: const FirebaseOptions(
      apiKey: 'fake',
      appId: 'fake',
      messagingSenderId: 'fake',
      projectId: 'fake',
    ),
  );
}

void main() async {
  TestWidgetsFlutterBinding.ensureInitialized();
  await setupFirebaseMocks();

  late FakeFirebaseFirestore fake;
  late EditarPerfilClienteState state;

  setUp(() {
    fake = FakeFirebaseFirestore();
    state = EditarPerfilClienteState(testDb: fake);
  });

  // ======================================================
  // üß© Inicializa√ß√£o
  // ======================================================
  group('üß© Inicializa√ß√£o', () {
    test('1Ô∏è‚É£ Estado inicial com carregando = true', () {
      expect(state.carregando, true);
    });

    test('2Ô∏è‚É£ Controladores de texto come√ßam vazios', () {
      expect(state.nomeCtrl.text, '');
      expect(state.emailCtrl.text, '');
    });
  });

  // ======================================================
  // üì¶ carregarPerfil
  // ======================================================
  group('üì¶ carregarPerfil', () {
    testWidgets('3Ô∏è‚É£ Retorna sem erro quando usu√°rio n√£o existe', (tester) async {
      await tester.pumpWidget(MaterialApp(
        home: EditarPerfilCliente(userId: 'nao_existe'),
      ));
      final s = tester.state(find.byType(EditarPerfilCliente)) as EditarPerfilClienteState;
      s.db = fake;
      await s.carregarPerfil();
      expect(s.carregando, true);
    });

    testWidgets('4Ô∏è‚É£ Carrega dados corretamente', (tester) async {
      await fake.collection('usuarios').doc('u1').set({
        'nome': 'Jeovanna',
        'email': 'jeovanna@test.com',
        'tipoPerfil': 'Cliente',
        'endereco': {'cidade': 'Rio Verde'},
      });

      await tester.pumpWidget(MaterialApp(home: EditarPerfilCliente(userId: 'u1')));
      final s = tester.state(find.byType(EditarPerfilCliente)) as EditarPerfilClienteState;
      s.db = fake;
      await s.carregarPerfil();
      await tester.pump(const Duration(milliseconds: 300));
      expect(s.nomeCtrl.text, 'Jeovanna');
      expect(s.cidadeCtrl.text, 'Rio Verde');
    });
  });

  // ======================================================
  // üíæ salvar
  // ======================================================
  group('üíæ salvar', () {
    testWidgets('5Ô∏è‚É£ Salva dados corretamente no Firestore', (tester) async {
      await fake.collection('usuarios').doc('u1').set({'nome': 'Antigo'});
      await tester.pumpWidget(MaterialApp(home: EditarPerfilCliente(userId: 'u1')));
      final s = tester.state(find.byType(EditarPerfilCliente)) as EditarPerfilClienteState;
      s.db = fake;
      await s.carregarPerfil();
      await tester.pump(const Duration(milliseconds: 200));
      s.nomeCtrl.text = 'Novo';
      await s.salvar();
      final doc = await fake.collection('usuarios').doc('u1').get();
      expect(doc['nome'], 'Novo');
    });

    testWidgets('6Ô∏è‚É£ Valida√ß√µes adicionais n√£o travam', (tester) async {
      await fake.collection('usuarios').doc('u1').set({
        'nome': 'Joana',
        'tipoPerfil': 'Prestador',
      });
      await tester.pumpWidget(MaterialApp(home: EditarPerfilCliente(userId: 'u1')));
      final s = tester.state(find.byType(EditarPerfilCliente)) as EditarPerfilClienteState;
      s.db = fake;
      s.tipoPerfil = 'Prestador';
      expectLater(s.salvar(), completes);
    });
  });

  // ======================================================
  // üñºÔ∏è Foto de perfil
  // ======================================================
  group('üñºÔ∏è Foto de perfil', () {
    testWidgets('7Ô∏è‚É£ removerFotoPerfil limpa vari√°veis', (tester) async {
      await fake.collection('usuarios').doc('u1').set({
        'fotoUrl': 'http://fake.url',
        'fotoPath': 'path/foto',
      });
      await tester.pumpWidget(MaterialApp(home: EditarPerfilCliente(userId: 'u1')));
      final s = tester.state(find.byType(EditarPerfilCliente)) as EditarPerfilClienteState;
      s.db = fake;
      s.fotoUrl = 'http://fake.url';
      s.fotoPath = 'path/foto';
      await s.removerFotoPerfil();
      expect(s.fotoUrl, isNull);
      expect(s.fotoPath, isNull);
    });
  });

  // ======================================================
  // üìã Campos e controles
  // ======================================================
  group('üìã Campos e controles', () {
    test('8Ô∏è‚É£ tipoPerfil come√ßa como Cliente', () {
      expect(state.tipoPerfil, 'Cliente');
    });

    test('9Ô∏è‚É£ Experi√™ncias cont√©m "+10 anos"', () {
      expect(state.experiencias.contains('+10 anos'), true);
    });

    test('üîü Dias da semana cont√©m Segunda-feira', () {
      expect(state.diasSemana.contains('Segunda-feira'), true);
    });

    test('11Ô∏è‚É£ Campo nome pode ser alterado', () {
      state.nomeCtrl.text = 'Carlos';
      expect(state.nomeCtrl.text, 'Carlos');
    });

    test('12Ô∏è‚É£ emailCtrl √© TextEditingController', () {
      expect(state.emailCtrl, isA<TextEditingController>());
    });
  });

  // ======================================================
  // üé® Interface
  // ======================================================
// ======================================================
// üé® Interface
// ======================================================
group('üé® Interface', () {
  testWidgets('13Ô∏è‚É£ Renderiza campo Nome completo', (tester) async {
    await tester.pumpWidget(MaterialApp(
      home: Scaffold(
        body: Builder(builder: (_) {
          final s = EditarPerfilClienteState(testDb: FakeFirebaseFirestore());
          s.carregando = false; // evita travar no load
          return Form(
            key: s.formKey,
            child: TextFormField(decoration: const InputDecoration(labelText: 'Nome completo')),
          );
        }),
      ),
    ));
    expect(find.widgetWithText(TextFormField, 'Nome completo'), findsOneWidget);
  });

  testWidgets('14Ô∏è‚É£ Renderiza bot√£o Salvar', (tester) async {
    await tester.pumpWidget(const MaterialApp(
      home: Scaffold(body: ElevatedButton(onPressed: null, child: Text('Salvar'))),
    ));
    expect(find.text('Salvar'), findsOneWidget);
  });

  testWidgets('15Ô∏è‚É£ Renderiza bot√£o Cancelar', (tester) async {
    await tester.pumpWidget(const MaterialApp(
      home: Scaffold(body: ElevatedButton(onPressed: null, child: Text('Cancelar'))),
    ));
    expect(find.text('Cancelar'), findsOneWidget);
  });

  testWidgets('16Ô∏è‚É£ Renderiza bot√£o Excluir Conta', (tester) async {
    await tester.pumpWidget(const MaterialApp(
      home: Scaffold(body: ElevatedButton(onPressed: null, child: Text('Excluir Conta'))),
    ));
    expect(find.text('Excluir Conta'), findsOneWidget);
  });
});


  // ======================================================
  // üß† L√≥gica interna
  // ======================================================
  group('üß† L√≥gica interna', () {
    test('17Ô∏è‚É£ secTitle retorna Padding', () {
      final t = state.secTitle('Teste');
      expect(t, isA<Padding>());
    });

    test('18Ô∏è‚É£ Alterna tipoPerfil', () {
      state.tipoPerfil = 'Prestador';
      expect(state.tipoPerfil, 'Prestador');
    });

    test('19Ô∏è‚É£ Adiciona √°rea de atendimento', () {
      state.areaAtendimento.add('Rio Verde');
      expect(state.areaAtendimento.contains('Rio Verde'), true);
    });

    test('20Ô∏è‚É£ Remove √°rea de atendimento', () {
      state.areaAtendimento.add('Jata√≠');
      state.areaAtendimento.remove('Jata√≠');
      expect(state.areaAtendimento.contains('Jata√≠'), false);
    });
  });

  // ======================================================
  // üß© Campos profissionais
  // ======================================================
  group('üß© Campos profissionais', () {
    test('21Ô∏è‚É£ Lista de experi√™ncias n√£o vazia', () {
      expect(state.experiencias.isNotEmpty, true);
    });

    test('22Ô∏è‚É£ categoriaProfId pode ser nula', () {
      expect(state.categoriaProfId, isNull);
    });

    test('23Ô∏è‚É£ tempoExperiencia pode ser vazio', () {
      expect(state.tempoExperiencia, '');
    });
  });

  // ======================================================
  // üß∞ Comportamentos visuais
  // ======================================================
  group('üß∞ Comportamentos visuais', () {
    testWidgets('24Ô∏è‚É£ Mostra CircularProgress quando carregando', (tester) async {
      state.carregando = true;
      await tester.pumpWidget(MaterialApp(
        home: Scaffold(
          body: state.carregando
              ? const CircularProgressIndicator()
              : const SizedBox(),
        ),
      ));
      expect(find.byType(CircularProgressIndicator), findsOneWidget);
    });
  });

  // ======================================================
  // üìä Extras e consist√™ncia
  // ======================================================
  group('üìä Extras e consist√™ncia', () {
    test('25Ô∏è‚É£ fotoUrl pode ser nula', () {
      state.fotoUrl = null;
      expect(state.fotoUrl, isNull);
    });

    test('26Ô∏è‚É£ fotoPath pode ser nula', () {
      state.fotoPath = null;
      expect(state.fotoPath, isNull);
    });

    test('27Ô∏è‚É£ formKey √© GlobalKey<FormState>', () {
      expect(state.formKey, isA<GlobalKey<FormState>>());
    });

    test('28Ô∏è‚É£ State cont√©m 7 dias na lista', () {
      expect(state.diasSemana.length, 7);
    });

    test('29Ô∏è‚É£ campos textuais respondem', () {
      state.descricaoCtrl.text = 'Teste';
      expect(state.descricaoCtrl.text, 'Teste');
    });

    test('30Ô∏è‚É£ √°reaAtendimento inicial √© vazia', () {
      expect(state.areaAtendimento.isEmpty, true);
    });
  });
}
