import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:myapp/Cliente/visualizarPerfilPrestador.dart';

void main() {
  TestWidgetsFlutterBinding.ensureInitialized();

  late FakeFirebaseFirestore fakeDb;

  setUp(() {
    fakeDb = FakeFirebaseFirestore();
  });

  // -------------------- READ --------------------
  group('üìñ READ (Leitura)', () {
    test('1Ô∏è‚É£ ServicoItem.formatPreco converte n√∫mero corretamente', () {
      final item = ServicoItem(
        serviceId: 's1',
        prestadorId: 'p1',
        data: const {},
      );
      expect(item.formatPreco(50), 'R\$50,00');
      expect(item.formatPreco('1.200,50'), 'R\$1200,50');
    });

    test('2Ô∏è‚É£ ServicoItem.formatPreco lida com nulos', () {
      final item = ServicoItem(
        serviceId: 's1',
        prestadorId: 'p1',
        data: const {},
      );
      expect(item.formatPreco(null), 'R\$0,00');
      expect(item.formatPreco('abc'), 'R\$0,00');
    });
  });

  // -------------------- CREATE --------------------
  group('üß© CREATE (Cria√ß√£o)', () {
    testWidgets('3Ô∏è‚É£ Renderiza cabe√ßalho do prestador corretamente', (tester) async {
      await tester.pumpWidget(const MaterialApp(
        home: Scaffold(
          body: Header(
            nome: 'Jo√£o da Silva',
            email: 'joao@email.com',
            fotoUrl: '',
            categoria: 'Eletricista',
            cidade: 'Rio Verde',
            whatsapp: '64 99999-9999',
            nota: 4.5,
            avaliacoes: 12,
          ),
        ),
      ));
      await tester.pumpAndSettle();

      expect(find.text('Jo√£o da Silva'), findsOneWidget);
      expect(find.textContaining('Eletricista'), findsOneWidget);
      expect(find.textContaining('Rio Verde'), findsOneWidget);
      expect(find.textContaining('4.5'), findsOneWidget);
      expect(find.textContaining('12 avalia√ß√µes'), findsOneWidget);
    });

    testWidgets('4Ô∏è‚É£ Mostra texto padr√£o quando campos vazios', (tester) async {
      await tester.pumpWidget(const MaterialApp(
        home: Scaffold(
          body: Header(
            nome: '',
            email: '',
            fotoUrl: '',
            categoria: '',
            cidade: '',
            whatsapp: '',
            nota: null,
            avaliacoes: null,
          ),
        ),
      ));
      await tester.pumpAndSettle();

      expect(find.text('Categoria n√£o informada'), findsOneWidget);
      expect(find.text('Cidade n√£o informada'), findsOneWidget);
    });
  });

  // -------------------- UPDATE --------------------
  group('üß† UPDATE (Atualiza√ß√£o)', () {
    test('5Ô∏è‚É£ ServicoItem.abreviacaoUnidade retorna sigla do FakeFirestore', () async {
      await fakeDb.collection(VisualizarPerfilPrestador.colUnidades).doc('u1').set({
        'abreviacao': 'm¬≤',
      });

      final item = ServicoItem(
        serviceId: 's1',
        prestadorId: 'p1',
        data: const {},
        firestore: fakeDb, // üîπ inje√ß√£o fake
      );

      final res = await item.abreviacaoUnidade('u1');
      expect(res, 'm¬≤');
    });

    test('6Ô∏è‚É£ ServicoItem.imagemDaCategoria retorna URL do FakeFirestore', () async {
      await fakeDb
          .collection(VisualizarPerfilPrestador.colCategoriasServ)
          .doc('c1')
          .set({'imagemUrl': 'https://exemplo.com/img.jpg'});

      final item = ServicoItem(
        serviceId: 's1',
        prestadorId: 'p1',
        data: const {},
        firestore: fakeDb, // üîπ inje√ß√£o fake
      );

      final res = await item.imagemDaCategoria('c1');
      expect(res, 'https://exemplo.com/img.jpg');
    });
  });

  // -------------------- DELETE --------------------
  group('üóëÔ∏è DELETE (Falhas / Limpeza)', () {
    test('7Ô∏è‚É£ abreviacaoUnidade retorna vazio quando id √© nulo ou inexistente', () async {
      final item = ServicoItem(
        serviceId: 's1',
        prestadorId: 'p1',
        data: const {},
        firestore: fakeDb,
      );

      final res = await item.abreviacaoUnidade('');
      expect(res, '');
    });

    test('8Ô∏è‚É£ imagemDaCategoria retorna vazio quando id √© nulo ou inexistente', () async {
      final item = ServicoItem(
        serviceId: 's1',
        prestadorId: 'p1',
        data: const {},
        firestore: fakeDb,
      );

      final res = await item.imagemDaCategoria('');
      expect(res, '');
    });
  });

  // -------------------- INTERFACE --------------------
  group('üé® INTERFACE', () {
    testWidgets('9Ô∏è‚É£ Renderiza lista de servi√ßos vazia', (tester) async {
      await tester.pumpWidget(MaterialApp(
        home: Scaffold(
          body: ListaServicos(
            prestadorId: 'p1',
            firestore: fakeDb, // üîπ usa fake Firestore
          ),
        ),
      ));
      await tester.pump(const Duration(milliseconds: 300));

      expect(find.textContaining('Nenhum servi√ßo cadastrado'), findsOneWidget);
    });
  });
}
