import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/material.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:myapp/Administrador/categoriaProfissionais.dart';

void main() {
  TestWidgetsFlutterBinding.ensureInitialized();

  late FakeFirebaseFirestore firestore;

  setUp(() async {
    firestore = FakeFirebaseFirestore();
  });

  group('üß™ Testes da tela CategProf', () {
    testWidgets('1Ô∏è‚É£ Tela carrega t√≠tulo e bot√£o principal', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      expect(find.text('Categorias de Profissionais'), findsOneWidget);
      expect(find.text('Nova Categoria'), findsOneWidget);
    });

    testWidgets('2Ô∏è‚É£ Exibe texto informativo inicial', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      expect(
        find.text(
          'Gerencie as categorias utilizadas pelos prestadores cadastrados',
        ),
        findsOneWidget,
      );
    });

    testWidgets('3Ô∏è‚É£ Mostra carregando ou lista inicial', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pump(const Duration(milliseconds: 50));

      final hasLoading = find
          .byType(CircularProgressIndicator)
          .evaluate()
          .isNotEmpty;
      final hasText = find.textContaining('categoria').evaluate().isNotEmpty;

      expect(
        hasLoading || hasText,
        true,
        reason: 'Deveria exibir loading ou lista inicial',
      );
    });

    testWidgets('4Ô∏è‚É£ Exibe texto quando n√£o h√° categorias', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      expect(find.text('Nenhuma categoria cadastrada.'), findsOneWidget);
    });

    testWidgets('5Ô∏è‚É£ Adiciona categoria e lista aparece', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Eletricista',
        'descricao': 'Servi√ßos el√©tricos',
        'ativo': true,
      });

      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();

      expect(find.text('Eletricista'), findsOneWidget);
      expect(find.text('Servi√ßos el√©tricos'), findsOneWidget);
    });

    testWidgets('6Ô∏è‚É£ Abre di√°logo ao clicar em Nova Categoria', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      expect(find.text('Nova Categoria de Profissional'), findsOneWidget);
      expect(find.text('Nome da categoria'), findsOneWidget);
      expect(find.text('Descri√ß√£o da categoria'), findsOneWidget);
    });

    testWidgets('7Ô∏è‚É£ Fecha di√°logo ao clicar em Cancelar', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      await tester.tap(find.text('Cancelar'));
      await tester.pumpAndSettle();

      expect(find.text('Nova Categoria de Profissional'), findsNothing);
    });

    testWidgets('8Ô∏è‚É£ Salvar sem preencher n√£o adiciona categoria', (
      tester,
    ) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();

      final docs = await firestore.collection('categoriasProfissionais').get();
      expect(docs.docs.isEmpty, true);
    });

    testWidgets('9Ô∏è‚É£ Salvar adiciona nova categoria', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      await tester.enterText(find.byType(TextFormField).at(0), 'Pedreiro');
      await tester.enterText(
        find.byType(TextFormField).at(1),
        'Constru√ß√£o civil',
      );
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();

      final snap = await firestore.collection('categoriasProfissionais').get();
      expect(snap.docs.length, 1);
      expect(snap.docs.first['nome'], 'Pedreiro');
    });

    testWidgets('üîü Bot√£o Editar aparece na listagem', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Pintor',
        'descricao': 'Servi√ßos de pintura',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      expect(find.text('Editar'), findsOneWidget);
    });

    testWidgets('11Ô∏è‚É£ Abre di√°logo de edi√ß√£o corretamente', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Pintor',
        'descricao': 'Servi√ßos de pintura',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();
      expect(find.text('Editar Categoria de Profissional'), findsOneWidget);
    });

    testWidgets('12Ô∏è‚É£ Edi√ß√£o mant√©m dados anteriores nos campos', (
      tester,
    ) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Pintor',
        'descricao': 'Pinta paredes',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();

      // Verifica se os campos cont√™m os valores esperados
      final nomeField = tester.widget<TextFormField>(
        find.byType(TextFormField).at(0),
      );
      final descField = tester.widget<TextFormField>(
        find.byType(TextFormField).at(1),
      );

      expect((nomeField.controller as TextEditingController).text, 'Pintor');
      expect(
        (descField.controller as TextEditingController).text,
        'Pinta paredes',
      );
    });

    testWidgets('13Ô∏è‚É£ Editar e salvar atualiza categoria', (tester) async {
      final doc = await firestore.collection('categoriasProfissionais').add({
        'nome': 'Pintor',
        'descricao': 'Pinta paredes',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();

      // Limpa e digita novo texto
      await tester.enterText(find.byType(TextFormField).at(1), 'Pinta casas');
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();

      final atualizado = await firestore
          .collection('categoriasProfissionais')
          .doc(doc.id)
          .get();
      expect(atualizado['descricao'], 'Pinta casas');
    });

    testWidgets('14Ô∏è‚É£ Switch de ativo aparece e pode mudar', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Marceneiro',
        'descricao': 'Faz m√≥veis',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      expect(find.byType(Switch), findsOneWidget);
    });

    testWidgets('15Ô∏è‚É£ Mudar switch atualiza campo ativo no Firestore', (
      tester,
    ) async {
      final doc = await firestore.collection('categoriasProfissionais').add({
        'nome': 'Encadernador',
        'descricao': 'Trabalha com livros',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();

      await tester.tap(find.byType(Switch));
      await tester.pumpAndSettle();

      final atualizado = await firestore
          .collection('categoriasProfissionais')
          .doc(doc.id)
          .get();
      expect(atualizado['ativo'], false);
    });

    testWidgets('16Ô∏è‚É£ Cart√£o exibe nome e descri√ß√£o corretamente', (
      tester,
    ) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Encanador',
        'descricao': 'Servi√ßos hidr√°ulicos',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();

      expect(find.text('Encanador'), findsOneWidget);
      expect(find.text('Servi√ßos hidr√°ulicos'), findsOneWidget);
    });

    testWidgets('17Ô∏è‚É£ √çcone de voltar existe', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      expect(find.byIcon(Icons.arrow_back), findsOneWidget);
    });

    testWidgets('18Ô∏è‚É£ Padding do body est√° correto', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      final paddingFinder = find.byWidgetPredicate(
        (widget) =>
            widget is Padding &&
            widget.padding == const EdgeInsets.fromLTRB(16, 12, 16, 24),
      );
      expect(paddingFinder, findsOneWidget);
    });

    testWidgets('19Ô∏è‚É£ Teste de m√∫ltiplas categorias ordenadas por nome', (
      tester,
    ) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Zelador',
        'descricao': 'Limpeza geral',
        'ativo': true,
      });
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Alinhador',
        'descricao': 'Ajuste de rodas',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      expect(find.text('Alinhador'), findsOneWidget);
      expect(find.text('Zelador'), findsOneWidget);
    });

    // CORRE√á√ÉO: Teste 20 - Campo nome ausente exibe h√≠fen
    testWidgets('20Ô∏è‚É£ Campo nome ausente exibe h√≠fen', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'descricao': 'Sem nome',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();

      // Verifica se pelo menos um h√≠fen √© exibido (nome vazio)
      expect(find.text('-'), findsAtLeast(1));
    });

    testWidgets('21Ô∏è‚É£ Bot√£o Salvar existe e √© roxo', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Salvar'), findsOneWidget);
    });

    testWidgets('22Ô∏è‚É£ Texto do bot√£o Cancelar √© vis√≠vel', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Cancelar'), findsOneWidget);
    });

    testWidgets('23Ô∏è‚É£ Verifica isolamento entre inst√¢ncias de FakeFirestore', (
      tester,
    ) async {
      final fs2 = FakeFirebaseFirestore();
      await fs2.collection('categoriasProfissionais').add({'nome': 'Teste'});

      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();

      // A inst√¢ncia principal n√£o deve ter o documento adicionado na fs2
      expect(find.text('Teste'), findsNothing);
    });

    testWidgets('24Ô∏è‚É£ Campo descri√ß√£o suporta texto longo', (tester) async {
      final longText = 'a' * 100;
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'LongText',
        'descricao': longText,
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      expect(find.text(longText), findsOneWidget);
    });

    testWidgets('25Ô∏è‚É£ Di√°logo tem estilo arredondado', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      final alertDialog = tester.widget<AlertDialog>(find.byType(AlertDialog));
      expect(
        (alertDialog.shape as RoundedRectangleBorder).borderRadius,
        BorderRadius.circular(18),
      );
    });

    testWidgets('26Ô∏è‚É£ AppBar tem cor e estilo corretos', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );

      final appBar = tester.widget<AppBar>(find.byType(AppBar));
      expect(appBar.backgroundColor, Colors.white);
      expect(appBar.elevation, 0.5);
    });

    // CORRE√á√ÉO: Teste 27 - Bot√£o nova categoria tem estilo arredondado
    testWidgets('27Ô∏è‚É£ Bot√£o nova categoria existe com texto correto', (
      tester,
    ) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );

      // Verifica apenas se o bot√£o existe com o texto correto
      expect(find.text('Nova Categoria'), findsOneWidget);

      // Verifica se tem o √≠cone de adicionar
      expect(find.byIcon(Icons.add), findsAtLeast(1));
    });
    // CORRE√á√ÉO: Teste 28 - Cart√µes t√™m sombra e estilo visual
    testWidgets('28Ô∏è‚É£ Cart√µes t√™m sombra e estilo visual', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Teste',
        'descricao': 'Descri√ß√£o teste',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();

      // Encontra o Container que tem BoxDecoration com sombra
      final containerFinder = find.byWidgetPredicate(
        (widget) =>
            widget is Container &&
            widget.decoration is BoxDecoration &&
            (widget.decoration as BoxDecoration).boxShadow != null,
      );

      expect(containerFinder, findsAtLeast(1));
    });

    testWidgets('29Ô∏è‚É£ StreamBuilder ordena por nome', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Z',
        'ativo': true,
      });
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'A',
        'ativo': true,
      });

      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();

      // Verifica se ambos existem (a ordena√ß√£o √© feita no Firestore)
      expect(find.text('A'), findsOneWidget);
      expect(find.text('Z'), findsOneWidget);
    });

    testWidgets('30Ô∏è‚É£ Background color da tela √© F9F6FF', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );

      final scaffold = tester.widget<Scaffold>(find.byType(Scaffold));
      expect(scaffold.backgroundColor, const Color(0xFFF9F6FF));
    });

    test('31Ô∏è‚É£ Tentativa de exclus√£o de doc inexistente n√£o quebra', () async {
      final ref = firestore.collection('categoriasProfissionais');
      await expectLater(ref.doc('inexistente').delete(), completes);
    });
  });
}
