import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/material.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:myapp/Administrador/categoria_profissionais.dart';

void main() {
  TestWidgetsFlutterBinding.ensureInitialized();

  late FakeFirebaseFirestore firestore;

  setUp(() async {
    firestore = FakeFirebaseFirestore();
  });

  group('üß™ Testes da tela CategProf', () {
    testWidgets('1Ô∏è‚É£ Tela carrega t√≠tulo e bot√£o principal', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      expect(find.text('Categorias de profissionais'), findsOneWidget);
      expect(find.text('Nova Categoria'), findsOneWidget);
    });

    testWidgets('2Ô∏è‚É£ Exibe texto informativo inicial', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      expect(
        find.text('Gerencie as categorias dispon√≠veis de profissionais'),
        findsOneWidget,
      );
    });

    testWidgets('3Ô∏è‚É£ Mostra carregando ou lista inicial', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pump(const Duration(milliseconds: 50));

      final hasLoading = find.byType(CircularProgressIndicator).evaluate().isNotEmpty;
      final hasText = find.textContaining('categoria').evaluate().isNotEmpty;

      expect(hasLoading || hasText, true, reason: 'Deveria exibir loading ou lista inicial');
    });

    testWidgets('4Ô∏è‚É£ Exibe texto quando n√£o h√° categorias', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();
      expect(find.text('Nenhuma categoria cadastrada.'), findsOneWidget);
    });

    testWidgets('5Ô∏è‚É£ Adiciona categoria e lista aparece', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Eletricista',
        'descricao': 'Servi√ßos el√©tricos',
        'ativo': true,
      });

      await tester.pumpWidget(
        MaterialApp(home: CategProf(firestore: firestore)),
      );
      await tester.pumpAndSettle();

      expect(find.text('Eletricista'), findsOneWidget);
      expect(find.text('Servi√ßos el√©tricos'), findsOneWidget);
    });

    testWidgets('6Ô∏è‚É£ Abre di√°logo ao clicar em Nova Categoria', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      expect(find.text('Nova categoria de profissional'), findsOneWidget);
      expect(find.text('Nome da categoria'), findsOneWidget);
      expect(find.text('Descri√ß√£o da categoria'), findsOneWidget);
    });

    testWidgets('7Ô∏è‚É£ Fecha di√°logo ao clicar em Cancelar', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      await tester.tap(find.text('Cancelar'));
      await tester.pumpAndSettle();

      expect(find.text('Nova categoria de profissional'), findsNothing);
    });

    testWidgets('8Ô∏è‚É£ Salvar sem preencher n√£o adiciona categoria', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();

      final docs = await firestore.collection('categoriasProfissionais').get();
      expect(docs.docs.isEmpty, true);
    });

    testWidgets('9Ô∏è‚É£ Salvar adiciona nova categoria', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();

      await tester.enterText(find.byType(TextFormField).at(0), 'Pedreiro');
      await tester.enterText(find.byType(TextFormField).at(1), 'Constru√ß√£o civil');
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();

      final snap = await firestore.collection('categoriasProfissionais').get();
      expect(snap.docs.length, 1);
      expect(snap.docs.first['nome'], 'Pedreiro');
    });

    testWidgets('üîü Bot√£o Editar aparece na listagem', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Pintor',
        'descricao': 'Servi√ßos de pintura',
        'ativo': true,
      });
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      expect(find.text('Editar'), findsOneWidget);
    });

    testWidgets('11Ô∏è‚É£ Abre di√°logo de edi√ß√£o corretamente', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Pintor',
        'descricao': 'Servi√ßos de pintura',
        'ativo': true,
      });
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();
      expect(find.text('Altera√ß√£o de categoria de profissional'), findsOneWidget);
    });

    testWidgets('12Ô∏è‚É£ Edi√ß√£o mant√©m dados anteriores nos campos', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Pintor',
        'descricao': 'Pinta paredes',
        'ativo': true,
      });
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();
      expect(find.widgetWithText(TextFormField, 'Pintor'), findsOneWidget);
      expect(find.widgetWithText(TextFormField, 'Pinta paredes'), findsOneWidget);
    });

    testWidgets('13Ô∏è‚É£ Editar e salvar atualiza categoria', (tester) async {
      final doc = await firestore.collection('categoriasProfissionais').add({
        'nome': 'Pintor',
        'descricao': 'Pinta paredes',
        'ativo': true,
      });
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();
      await tester.enterText(find.byType(TextFormField).at(1), 'Pinta casas');
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();

      final atualizado = await firestore.collection('categoriasProfissionais').doc(doc.id).get();
      expect(atualizado['descricao'], 'Pinta casas');
    });

    testWidgets('14Ô∏è‚É£ Switch de ativo aparece e pode mudar', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Marceneiro',
        'descricao': 'Faz m√≥veis',
        'ativo': true,
      });
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      expect(find.byType(Switch), findsOneWidget);
    });

    testWidgets('15Ô∏è‚É£ Mudar switch atualiza campo ativo no Firestore', (tester) async {
      final doc = await firestore.collection('categoriasProfissionais').add({
        'nome': 'Encadernador',
        'descricao': 'Trabalha com livros',
        'ativo': true,
      });
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();

      await tester.tap(find.byType(Switch));
      await tester.pumpAndSettle();

      final atualizado = await firestore.collection('categoriasProfissionais').doc(doc.id).get();
      expect(atualizado['ativo'], false);
    });

    testWidgets('16Ô∏è‚É£ T√≠tulos de colunas aparecem corretamente', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      expect(find.text('Nome'), findsOneWidget);
      expect(find.text('Descri√ß√£o'), findsOneWidget);
    });

    testWidgets('17Ô∏è‚É£ √çcone de voltar existe', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      expect(find.byIcon(Icons.arrow_back), findsOneWidget);
    });

    testWidgets('18Ô∏è‚É£ Layout cont√©m Divider entre cabe√ßalho e lista', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      expect(find.byType(Divider), findsOneWidget);
    });

    testWidgets('19Ô∏è‚É£ Padding principal √© 16', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      final padding = tester.widget<Padding>(find.byType(Padding).first);
      expect(padding.padding, const EdgeInsets.all(16));
    });

    testWidgets('20Ô∏è‚É£ Teste de m√∫ltiplas categorias ordenadas por nome', (tester) async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Zelador',
        'descricao': 'Limpeza geral',
        'ativo': true,
      });
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Alinhador',
        'descricao': 'Ajuste de rodas',
        'ativo': true,
      });
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.pumpAndSettle();
      expect(find.text('Alinhador'), findsOneWidget);
      expect(find.text('Zelador'), findsOneWidget);
    });

    test('21Ô∏è‚É£ Campo nome ausente n√£o quebra', () async {
      await firestore.collection('categoriasProfissionais').add({
        'descricao': 'Sem nome',
        'ativo': true,
      });
      final snap = await firestore.collection('categoriasProfissionais').get();
      expect(snap.docs.first.data().containsKey('nome'), false);
    });

    test('22Ô∏è‚É£ Cria√ß√£o direta no Firestore funciona', () async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Encanador',
        'descricao': 'Tubula√ß√µes',
        'ativo': false,
      });
      final snap = await firestore.collection('categoriasProfissionais').get();
      expect(snap.docs.first['nome'], 'Encanador');
    });

    test('23Ô∏è‚É£ Atualiza√ß√£o direta via doc.update', () async {
      final doc = await firestore.collection('categoriasProfissionais').add({
        'nome': 'Soldador',
        'descricao': 'Solda metais',
        'ativo': true,
      });
      await firestore.collection('categoriasProfissionais').doc(doc.id).update({
        'descricao': 'Trabalha com soldas',
      });
      final get = await firestore.collection('categoriasProfissionais').doc(doc.id).get();
      expect(get['descricao'], 'Trabalha com soldas');
    });

    test('24Ô∏è‚É£ Exclui todos e garante vazio', () async {
      final ref = firestore.collection('categoriasProfissionais');
      await ref.add({'nome': 'Teste', 'descricao': 'Temp', 'ativo': true});
      final snap = await ref.get();
      for (final d in snap.docs) {
        await ref.doc(d.id).delete();
      }
      final again = await ref.get();
      expect(again.docs.isEmpty, true);
    });

    test('25Ô∏è‚É£ Campo ativo default √© null se n√£o informado', () async {
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'Cabelereiro',
        'descricao': 'Cortes',
      });
      final doc = await firestore.collection('categoriasProfissionais').get();
      expect(doc.docs.first.data().containsKey('ativo'), false);
    });

    testWidgets('26Ô∏è‚É£ Bot√£o Salvar existe e √© roxo', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Salvar'), findsOneWidget);
    });

    testWidgets('27Ô∏è‚É£ Texto do bot√£o Cancelar √© vis√≠vel', (tester) async {
      await tester.pumpWidget(MaterialApp(home: CategProf(firestore: firestore)));
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Cancelar'), findsOneWidget);
    });

    test('28Ô∏è‚É£ Verifica isolamento entre inst√¢ncias de FakeFirestore', () async {
      final fs2 = FakeFirebaseFirestore();
      await fs2.collection('categoriasProfissionais').add({'nome': 'Teste'});
      final s2 = await fs2.collection('categoriasProfissionais').get();
      final s1 = await firestore.collection('categoriasProfissionais').get();
      expect(s2.docs.length, 1);
      expect(s1.docs.length, 0);
    });

    test('29Ô∏è‚É£ Campo descri√ß√£o suporta texto longo', () async {
      final longText = 'a' * 500;
      await firestore.collection('categoriasProfissionais').add({
        'nome': 'LongText',
        'descricao': longText,
      });
      final doc = await firestore.collection('categoriasProfissionais').get();
      expect(doc.docs.first['descricao'].length, 500);
    });

    test('30Ô∏è‚É£ Nome da cole√ß√£o est√° correto', () {
      expect('categoriasProfissionais', 'categoriasProfissionais');
    });
  });

  test('31 Tentativa de exclus√£o de doc inexistente n√£o quebra', () async {
  final ref = firestore.collection('categoriasProfissionais');
  await expectLater(ref.doc('inexistente').delete(), completes);
});

}
