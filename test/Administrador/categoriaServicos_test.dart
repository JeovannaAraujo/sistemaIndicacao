import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:firebase_storage_mocks/firebase_storage_mocks.dart';
import 'package:myapp/Administrador/categoriaServicos.dart';
import 'package:firebase_core/firebase_core.dart';


void main() {
  TestWidgetsFlutterBinding.ensureInitialized();
  late FakeFirebaseFirestore firestore;
  late MockFirebaseStorage storage;

  setUp(() {
    firestore = FakeFirebaseFirestore();
    storage = MockFirebaseStorage();
  });

  group('üß™ Testes da tela CategServ', () {
    testWidgets('1Ô∏è‚É£ Tela carrega t√≠tulo e bot√£o principal', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      expect(find.text('Categorias de Servi√ßo'), findsOneWidget);
      expect(find.text('Nova Categoria'), findsOneWidget);
    });

    testWidgets('2Ô∏è‚É£ Exibe texto informativo inicial', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      expect(find.text('Gerencie as categorias dispon√≠veis de servi√ßos'), findsOneWidget);
    });

    testWidgets('3Ô∏è‚É£ Exibe mensagem quando n√£o h√° categorias', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      expect(find.text('Nenhuma categoria cadastrada.'), findsOneWidget);
    });

    testWidgets('4Ô∏è‚É£ Adiciona categoria no Firestore', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'El√©trica',
        'descricao': 'Servi√ßos el√©tricos',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      expect(find.text('El√©trica'), findsOneWidget);
      expect(find.text('Servi√ßos el√©tricos'), findsOneWidget);
    });

    testWidgets('5Ô∏è‚É£ Abre di√°logo ao clicar em Nova Categoria', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Nova categoria de servi√ßo'), findsOneWidget);
    });

    testWidgets('6Ô∏è‚É£ Fecha di√°logo ao clicar em Cancelar', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Cancelar'));
      await tester.pumpAndSettle();
      expect(find.text('Nova categoria de servi√ßo'), findsNothing);
    });

    testWidgets('7Ô∏è‚É£ Salvar sem preencher n√£o adiciona categoria', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();
      final docs = await firestore.collection('categoriasServicos').get();
      expect(docs.docs.isEmpty, true);
    });

    testWidgets('8Ô∏è‚É£ Salvar adiciona nova categoria', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      await tester.enterText(find.byType(TextFormField).at(0), 'Hidr√°ulica');
      await tester.enterText(find.byType(TextFormField).at(1), 'Consertos de canos');
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();
      final snap = await firestore.collection('categoriasServicos').get();
      expect(snap.docs.length, 1);
      expect(snap.docs.first['nome'], 'Hidr√°ulica');
    });

    testWidgets('9Ô∏è‚É£ Exibe bot√£o Editar na listagem', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'El√©trica',
        'descricao': 'Instala√ß√µes',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      expect(find.text('Editar'), findsOneWidget);
    });

    testWidgets('üîü Abre di√°logo de edi√ß√£o', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'Pintura',
        'descricao': 'Residencial',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();
      expect(find.text('Altera√ß√£o de categoria de servi√ßo'), findsOneWidget);
    });

    testWidgets('11Ô∏è‚É£ Editar e salvar atualiza Firestore', (tester) async {
      final doc = await firestore.collection('categoriasServicos').add({
        'nome': 'Reforma',
        'descricao': 'Pequenas obras',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();
      await tester.enterText(find.byType(TextFormField).at(1), 'Grandes obras');
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();
      final atualizado =
          await firestore.collection('categoriasServicos').doc(doc.id).get();
      expect(atualizado['descricao'], 'Grandes obras');
    });

    testWidgets('12Ô∏è‚É£ Switch aparece e pode mudar valor', (tester) async {
      final doc = await firestore.collection('categoriasServicos').add({
        'nome': 'Jardinagem',
        'descricao': 'Podas',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.byType(Switch));
      await tester.pumpAndSettle();
      final atualizado =
          await firestore.collection('categoriasServicos').doc(doc.id).get();
      expect(atualizado['ativo'], false);
    });

    testWidgets('13Ô∏è‚É£ T√≠tulos das colunas aparecem', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      expect(find.text('Nome'), findsOneWidget);
      expect(find.text('Descri√ß√£o'), findsOneWidget);
    });

    testWidgets('14Ô∏è‚É£ Mostra √≠cone de imagem padr√£o se vazio', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'SemImagem',
        'descricao': 'Teste',
        'ativo': true,
        'imagemUrl': '',
      });
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      expect(find.byIcon(Icons.image), findsWidgets);
    });

    test('15Ô∏è‚É£ Campo imagem pode ser string vazia', () async {
      await firestore.collection('categoriasServicos').add({'imagemUrl': ''});
      final snap = await firestore.collection('categoriasServicos').get();
      expect(snap.docs.first['imagemUrl'], '');
    });

    test('16Ô∏è‚É£ Atualiza campo ativo no Firestore direto', () async {
      final doc = await firestore.collection('categoriasServicos').add({'ativo': true});
      await firestore.collection('categoriasServicos').doc(doc.id).update({'ativo': false});
      final get = await firestore.collection('categoriasServicos').doc(doc.id).get();
      expect(get['ativo'], false);
    });

    testWidgets('17Ô∏è‚É£ √çcone voltar existe', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      expect(find.byIcon(Icons.arrow_back), findsOneWidget);
    });

    testWidgets('18Ô∏è‚É£ Bot√£o Salvar existe', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Salvar'), findsOneWidget);
    });

    testWidgets('19Ô∏è‚É£ Bot√£o Cancelar existe', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Cancelar'), findsOneWidget);
    });

    test('20Ô∏è‚É£ Cria√ß√£o direta funciona', () async {
      await firestore
          .collection('categoriasServicos')
          .add({'nome': 'Limpeza', 'descricao': 'Geral'});
      final snap = await firestore.collection('categoriasServicos').get();
      expect(snap.docs.first['nome'], 'Limpeza');
    });

    test('21Ô∏è‚É£ Atualiza√ß√£o direta funciona', () async {
      final doc =
          await firestore.collection('categoriasServicos').add({'descricao': 'Antigo'});
      await firestore
          .collection('categoriasServicos')
          .doc(doc.id)
          .update({'descricao': 'Novo'});
      final get =
          await firestore.collection('categoriasServicos').doc(doc.id).get();
      expect(get['descricao'], 'Novo');
    });

    test('22Ô∏è‚É£ Exclus√£o de docs funciona', () async {
      final ref = firestore.collection('categoriasServicos');
      final doc = await ref.add({'nome': 'Teste'});
      await ref.doc(doc.id).delete();
      final all = await ref.get();
      expect(all.docs.isEmpty, true);
    });

    testWidgets('23Ô∏è‚É£ Layout cont√©m Divider', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      expect(find.byType(Divider), findsOneWidget);
    });

    testWidgets('24Ô∏è‚É£ Padding principal √© 16', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      final padding = tester.widget<Padding>(find.byType(Padding).first);
      expect(padding.padding, const EdgeInsets.all(16));
    });

    test('25Ô∏è‚É£ Suporte a texto longo na descri√ß√£o', () async {
      final long = 'a' * 400;
      await firestore.collection('categoriasServicos').add({'descricao': long});
      final get = await firestore.collection('categoriasServicos').get();
      expect(get.docs.first['descricao'].length, 400);
    });

    testWidgets('26Ô∏è‚É£ Bot√£o Nova Categoria tem √≠cone de add', (tester) async {
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      expect(find.byIcon(Icons.add), findsOneWidget);
    });

    testWidgets('27Ô∏è‚É£ Lista mostra nome e descri√ß√£o', (tester) async {
      await firestore
          .collection('categoriasServicos')
          .add({'nome': 'Teste', 'descricao': 'Desc'});
      await tester.pumpWidget(
        MaterialApp(home: CategServ(firestore: firestore, storage: storage)),
      );
      await tester.pumpAndSettle();
      expect(find.text('Teste'), findsOneWidget);
      expect(find.text('Desc'), findsOneWidget);
    });

    testWidgets('28Ô∏è‚É£ StreamBuilder trata erro com mensagem', (tester) async {
      final fake = FakeFirebaseFirestore();
      final bad = fake.collection('naoExiste');
      await tester.pumpWidget(
        MaterialApp(
          home: Builder(
            builder: (context) => Scaffold(
              body: StreamBuilder(
                stream: bad.snapshots(),
                builder: (_, snapshot) {
                  if (snapshot.hasError) {
                    return const Text('Erro ao carregar categorias');
                  }
                  return const Text('OK');
                },
              ),
            ),
          ),
        ),
      );
      await tester.pump();
      expect(find.text('OK'), findsOneWidget);
    });

    test('29Ô∏è‚É£ Firestore fake √© isolado', () async {
      final f2 = FakeFirebaseFirestore();
      await f2.collection('categoriasServicos').add({'nome': 'X'});
      final s1 = await firestore.collection('categoriasServicos').get();
      expect(s1.docs.isEmpty, true);
    });

    test('30Ô∏è‚É£ Nome da cole√ß√£o est√° correto', () {
      expect('categoriasServicos', 'categoriasServicos');
    });
  });

test('31Ô∏è‚É£ Tentar atualizar doc inexistente lan√ßa exce√ß√£o', () async {
  final ref = firestore.collection('categoriasServicos');
  expectLater(
    ref.doc('naoExiste').update({'nome': 'Teste'}),
    throwsA(isA<FirebaseException>()),
  );
});

test('32Ô∏è‚É£ Tentativa de exclus√£o de doc inexistente n√£o quebra', () async {
  final ref = firestore.collection('categoriasServicos');
  await expectLater(ref.doc('inexistente').delete(), completes);
});

}
