import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:firebase_storage_mocks/firebase_storage_mocks.dart';
import 'package:myapp/Administrador/categoriaServicos.dart';

void main() {
  TestWidgetsFlutterBinding.ensureInitialized();
  late FakeFirebaseFirestore firestore;
  late MockFirebaseStorage storage;

  setUp(() {
    firestore = FakeFirebaseFirestore();
    storage = MockFirebaseStorage();
  });

  group('üß™ Testes da tela CategServ', () {
    testWidgets('1Ô∏è‚É£ Tela carrega t√≠tulo e bot√£o principal', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      expect(find.text('Categorias de Servi√ßo'), findsOneWidget);
      expect(find.text('Nova Categoria'), findsOneWidget);
    });

    testWidgets('2Ô∏è‚É£ Exibe texto informativo inicial', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      expect(
        find.text('Gerencie as categorias utilizadas nos servi√ßos cadastrados'),
        findsOneWidget,
      ); // CORRIGIDO
    });

    testWidgets('3Ô∏è‚É£ Exibe mensagem quando n√£o h√° categorias', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      expect(find.text('Nenhuma categoria cadastrada.'), findsOneWidget);
    });

    testWidgets('4Ô∏è‚É£ Adiciona categoria no Firestore', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'El√©trica',
        'descricao': 'Servi√ßos el√©tricos',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      expect(find.text('El√©trica'), findsOneWidget);
      expect(find.text('Servi√ßos el√©tricos'), findsOneWidget);
    });

    testWidgets('5Ô∏è‚É£ Abre di√°logo ao clicar em Nova Categoria', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(
        find.text('Nova Categoria de Servi√ßo'),
        findsOneWidget,
      ); // CORRIGIDO
    });

    testWidgets('6Ô∏è‚É£ Fecha di√°logo ao clicar em Cancelar', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Cancelar'));
      await tester.pumpAndSettle();
      expect(find.text('Nova Categoria de Servi√ßo'), findsNothing); // CORRIGIDO
    });

    testWidgets('7Ô∏è‚É£ Salvar sem preencher n√£o adiciona categoria', (
      tester,
    ) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();
      final docs = await firestore.collection('categoriasServicos').get();
      expect(docs.docs.isEmpty, true);
    });

    testWidgets('8Ô∏è‚É£ Salvar adiciona nova categoria', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      await tester.enterText(find.byType(TextFormField).at(0), 'Hidr√°ulica');
      await tester.enterText(
        find.byType(TextFormField).at(1),
        'Consertos de canos',
      );
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();
      final snap = await firestore.collection('categoriasServicos').get();
      expect(snap.docs.length, 1);
      expect(snap.docs.first['nome'], 'Hidr√°ulica');
    });

    testWidgets('9Ô∏è‚É£ Exibe bot√£o Editar na listagem', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'El√©trica',
        'descricao': 'Instala√ß√µes',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      expect(find.text('Editar'), findsOneWidget);
    });

    testWidgets('üîü Abre di√°logo de edi√ß√£o', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'Pintura',
        'descricao': 'Residencial',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();
      expect(
        find.text('Editar Categoria de Servi√ßo'),
        findsOneWidget,
      ); // CORRIGIDO
    });

    testWidgets('11Ô∏è‚É£ Editar e salvar atualiza Firestore', (tester) async {
      final doc = await firestore.collection('categoriasServicos').add({
        'nome': 'Reforma',
        'descricao': 'Pequenas obras',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.text('Editar'));
      await tester.pumpAndSettle();
      await tester.enterText(find.byType(TextFormField).at(1), 'Grandes obras');
      await tester.tap(find.text('Salvar'));
      await tester.pumpAndSettle();
      final atualizado = await firestore
          .collection('categoriasServicos')
          .doc(doc.id)
          .get();
      expect(atualizado['descricao'], 'Grandes obras');
    });

    testWidgets('12Ô∏è‚É£ Switch aparece e pode mudar valor', (tester) async {
      final doc = await firestore.collection('categoriasServicos').add({
        'nome': 'Jardinagem',
        'descricao': 'Podas',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      await tester.tap(find.byType(Switch));
      await tester.pumpAndSettle();
      final atualizado = await firestore
          .collection('categoriasServicos')
          .doc(doc.id)
          .get();
      expect(atualizado['ativo'], false);
    });

    // REMOVIDO: Teste 13 - N√£o h√° t√≠tulos de colunas no c√≥digo real
    testWidgets('13Ô∏è‚É£ Cart√£o exibe nome e descri√ß√£o corretamente', (
      tester,
    ) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'Encanador',
        'descricao': 'Servi√ßos hidr√°ulicos',
        'ativo': true,
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();

      expect(find.text('Encanador'), findsOneWidget);
      expect(find.text('Servi√ßos hidr√°ulicos'), findsOneWidget);
    });

    testWidgets('14Ô∏è‚É£ Mostra √≠cone de imagem padr√£o se vazio', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'SemImagem',
        'descricao': 'Teste',
        'ativo': true,
        'imagemUrl': '',
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      expect(find.byIcon(Icons.image), findsWidgets);
    });

    test('15Ô∏è‚É£ Campo imagem pode ser string vazia', () async {
      await firestore.collection('categoriasServicos').add({'imagemUrl': ''});
      final snap = await firestore.collection('categoriasServicos').get();
      expect(snap.docs.first['imagemUrl'], '');
    });

    test('16Ô∏è‚É£ Atualiza campo ativo no Firestore direto', () async {
      final doc = await firestore.collection('categoriasServicos').add({
        'ativo': true,
      });
      await firestore.collection('categoriasServicos').doc(doc.id).update({
        'ativo': false,
      });
      final get = await firestore
          .collection('categoriasServicos')
          .doc(doc.id)
          .get();
      expect(get['ativo'], false);
    });

    testWidgets('17Ô∏è‚É£ √çcone voltar existe', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      expect(find.byIcon(Icons.arrow_back), findsOneWidget);
    });

    testWidgets('18Ô∏è‚É£ Bot√£o Salvar existe', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Salvar'), findsOneWidget);
    });

    testWidgets('19Ô∏è‚É£ Bot√£o Cancelar existe', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.tap(find.text('Nova Categoria'));
      await tester.pumpAndSettle();
      expect(find.text('Cancelar'), findsOneWidget);
    });

    test('20Ô∏è‚É£ Cria√ß√£o direta funciona', () async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'Limpeza',
        'descricao': 'Geral',
      });
      final snap = await firestore.collection('categoriasServicos').get();
      expect(snap.docs.first['nome'], 'Limpeza');
    });

    test('21Ô∏è‚É£ Atualiza√ß√£o direta funciona', () async {
      final doc = await firestore.collection('categoriasServicos').add({
        'descricao': 'Antigo',
      });
      await firestore.collection('categoriasServicos').doc(doc.id).update({
        'descricao': 'Novo',
      });
      final get = await firestore
          .collection('categoriasServicos')
          .doc(doc.id)
          .get();
      expect(get['descricao'], 'Novo');
    });

    test('22Ô∏è‚É£ Exclus√£o de docs funciona', () async {
      final ref = firestore.collection('categoriasServicos');
      final doc = await ref.add({'nome': 'Teste'});
      await ref.doc(doc.id).delete();
      final all = await ref.get();
      expect(all.docs.isEmpty, true);
    });

    // REMOVIDO: Teste 23 - N√£o h√° Divider no c√≥digo real

    testWidgets('23Ô∏è‚É£ Padding do body est√° correto', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      final paddingFinder = find.byWidgetPredicate(
        (widget) =>
            widget is Padding &&
            widget.padding == const EdgeInsets.fromLTRB(16, 12, 16, 24),
      );
      expect(paddingFinder, findsOneWidget);
    });

    test('24Ô∏è‚É£ Suporte a texto longo na descri√ß√£o', () async {
      final long = 'a' * 400;
      await firestore.collection('categoriasServicos').add({'descricao': long});
      final get = await firestore.collection('categoriasServicos').get();
      expect(get.docs.first['descricao'].length, 400);
    });

    testWidgets('25Ô∏è‚É£ Bot√£o Nova Categoria tem √≠cone de add', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      expect(find.byIcon(Icons.add), findsOneWidget);
    });

    testWidgets('26Ô∏è‚É£ Lista mostra nome e descri√ß√£o', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'Teste',
        'descricao': 'Desc',
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();
      expect(find.text('Teste'), findsOneWidget);
      expect(find.text('Desc'), findsOneWidget);
    });

    testWidgets('27Ô∏è‚É£ Exibe lista ou mensagem quando vazio', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();

      // Verifica se exibe a mensagem de "vazio" OU uma lista
      final hasEmptyMessage = find
          .text('Nenhuma categoria cadastrada.')
          .evaluate()
          .isNotEmpty;
      final hasListView = find.byType(ListView).evaluate().isNotEmpty;

      expect(hasEmptyMessage || hasListView, true);
    });

    test('28Ô∏è‚É£ Firestore fake √© isolado', () async {
      final f2 = FakeFirebaseFirestore();
      await f2.collection('categoriasServicos').add({'nome': 'X'});
      final s1 = await firestore.collection('categoriasServicos').get();
      expect(s1.docs.isEmpty, true);
    });

    test('29Ô∏è‚É£ Nome da cole√ß√£o est√° correto', () {
      expect('categoriasServicos', 'categoriasServicos');
    });

    testWidgets('30Ô∏è‚É£ Cart√£o tem container de imagem', (tester) async {
      await firestore.collection('categoriasServicos').add({
        'nome': 'ComImagem',
        'descricao': 'Teste',
        'ativo': true,
        'imagemUrl': '', // Usar string vazia para evitar erro de rede
      });
      await tester.pumpWidget(
        MaterialApp(
          home: CategServ(firestore: firestore, storage: storage),
        ),
      );
      await tester.pumpAndSettle();

      // Verifica se h√° um container para imagem
      expect(find.byType(Container), findsWidgets);
    });

    // CORRE√á√ÉO: Teste 31 - FakeFirestore lan√ßa exce√ß√£o para doc inexistente
    test('31Ô∏è‚É£ Tentar atualizar doc inexistente lan√ßa exce√ß√£o', () async {
      final ref = firestore.collection('categoriasServicos');
      await expectLater(
        ref.doc('naoExiste').update({'nome': 'Teste'}),
        throwsA(anything),
      );
    });

    test('32Ô∏è‚É£ Tentativa de exclus√£o de doc inexistente n√£o quebra', () async {
      final ref = firestore.collection('categoriasServicos');
      await expectLater(ref.doc('inexistente').delete(), completes);
    });
  });
}
